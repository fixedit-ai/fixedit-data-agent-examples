{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 5,
  "links": [],
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 15,
      "panels": [],
      "title": "Overview",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "internet latency"
            },
            "properties": [
              {
                "id": "unit",
                "value": "s"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Device"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Device detail link",
                    "url": "/d/${device_details_uid:raw}/device-details?var-bucket=${bucket}&var-device=${__value.text}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Product Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 305
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Device"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 184
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "AXIS OS"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 124
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "External IP"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 155
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Local IPs"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 477
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 20,
        "x": 0,
        "y": 1
      },
      "id": 17,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": ["sum"],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "hide": false,
          "query": "// Get devices with reported data in the selected interval\r\nfrom(bucket: \"${bucket}\")\r\n  // Filter on time\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  // Filter using variable selectors (supports All and multi-select)\r\n  |> filter(fn: (r) => r[\"area\"] =~ /^${area:regex}$/)\r\n  |> filter(fn: (r) => r[\"geography\"] =~ /^${geography:regex}$/)\r\n  |> filter(fn: (r) => r[\"region\"] =~ /^${region:regex}$/)\r\n  |> filter(fn: (r) => r[\"site\"] =~ /^${site:regex}$/)\r\n  |> filter(fn: (r) => r[\"type\"] =~ /^${type:regex}$/)\r\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] =~ /^${device:regex}$/)\r\n  |> filter(fn: (r) => r[\"product_full_name\"] =~ /^${model:regex}$/)\n  |> filter(fn: (r) => r[\"architecture\"] =~ /^${architecture:regex}$/)\n  |> filter(fn: (r) => r[\"soc\"] =~ /^${soc:regex}$/)\r\n  // We cant flatten if the values are of different types, so we just\r\n  // filter for an arbitrary value that we know exists...\r\n  |> filter(fn: (r) =>\r\n    r[\"_measurement\"] == \"cpu\" and\r\n    r[\"cpu\"] == \"cpu-total\" and\r\n    r[\"_field\"] == \"usage_idle\"\r\n  )\r\n  // Group by device to merge to one time series per device\r\n  |> group(columns: [\"${unique_identifier}\"])\r\n  // Get the last data point for each device. Note that last() does not work after\r\n  // group, so we use sort+limit instead.\r\n  |> sort(columns: [\"_time\"], desc: true)\r\n  |> limit(n: 1)\r\n  // Ungroup to prepare a flat output\r\n  |> group()\r\n  // Keep only timestamp and device identifier\r\n  |> keep(columns: [\"_time\", \"${unique_identifier}\"])\r\n  // Rename _time to seen\r\n  |> rename(columns: {_time: \"seen\"})",
          "refId": "Get last time stamp"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "hide": false,
          "query": "// Get latest external IP per device in the selected interval\nfrom(bucket: \"${bucket}\")\n  // Filter on time\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter using variable selectors (supports All and multi-select)\n  |> filter(fn: (r) => r[\"area\"] =~ /^${area:regex}$/)\n  |> filter(fn: (r) => r[\"geography\"] =~ /^${geography:regex}$/)\n  |> filter(fn: (r) => r[\"region\"] =~ /^${region:regex}$/)\n  |> filter(fn: (r) => r[\"site\"] =~ /^${site:regex}$/)\n  |> filter(fn: (r) => r[\"type\"] =~ /^${type:regex}$/)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] =~ /^${device:regex}$/)\n  |> filter(fn: (r) => r[\"product_full_name\"] =~ /^${model:regex}$/)\n  |> filter(fn: (r) => r[\"architecture\"] =~ /^${architecture:regex}$/)\n  |> filter(fn: (r) => r[\"soc\"] =~ /^${soc:regex}$/)\n  // Filter on external IP measurement\n  |> filter(fn: (r) => r[\"_measurement\"] == \"external_ip\")\n  // Group by device to isolate each host\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last reported external IP. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n  // Ungroup to flatten result set\n  |> group()\n  // Rename the value column and keep only relevant fields\n  |> rename(columns: {_value: \"external ip\"})\n  |> keep(columns: [\"${unique_identifier}\", \"external ip\"])\n",
          "refId": "Get external IPs"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "hide": false,
          "query": "// Get latest local IP per device in the selected interval\nfrom(bucket: \"${bucket}\")\n  // Filter on time\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter using variable selectors (supports All and multi-select)\n  |> filter(fn: (r) => r[\"area\"] =~ /^${area:regex}$/)\n  |> filter(fn: (r) => r[\"geography\"] =~ /^${geography:regex}$/)\n  |> filter(fn: (r) => r[\"region\"] =~ /^${region:regex}$/)\n  |> filter(fn: (r) => r[\"site\"] =~ /^${site:regex}$/)\n  |> filter(fn: (r) => r[\"type\"] =~ /^${type:regex}$/)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] =~ /^${device:regex}$/)\n  |> filter(fn: (r) => r[\"product_full_name\"] =~ /^${model:regex}$/)\n  |> filter(fn: (r) => r[\"architecture\"] =~ /^${architecture:regex}$/)\n  |> filter(fn: (r) => r[\"soc\"] =~ /^${soc:regex}$/)\n  // Filter on local IP measurement\n  |> filter(fn: (r) => r[\"_measurement\"] == \"local_ip_addresses\")\n  // Group by device to isolate each host\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last reported local IP. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n  // Ungroup to flatten result set\n  |> group()\n  // Rename the value column and keep only relevant fields\n  |> rename(columns: {_value: \"local ip\"})\n  |> keep(columns: [\"${unique_identifier}\", \"local ip\"])\n",
          "refId": "Get internal IPs"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "hide": false,
          "query": "// Get latest internet latency per device in the selected interval\nfrom(bucket: \"${bucket}\")\n  // Filter on time\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter using variable selectors (supports All and multi-select)\n  |> filter(fn: (r) => r[\"area\"] =~ /^${area:regex}$/)\n  |> filter(fn: (r) => r[\"geography\"] =~ /^${geography:regex}$/)\n  |> filter(fn: (r) => r[\"region\"] =~ /^${region:regex}$/)\n  |> filter(fn: (r) => r[\"site\"] =~ /^${site:regex}$/)\n  |> filter(fn: (r) => r[\"type\"] =~ /^${type:regex}$/)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] =~ /^${device:regex}$/)\n  |> filter(fn: (r) => r[\"product_full_name\"] =~ /^${model:regex}$/)\n  |> filter(fn: (r) => r[\"architecture\"] =~ /^${architecture:regex}$/)\n  |> filter(fn: (r) => r[\"soc\"] =~ /^${soc:regex}$/)\n  // Filter on internet connectivity measurement and field\n  |> filter(fn: (r) => r[\"_measurement\"] == \"internet_connectivity\")\n  |> filter(fn: (r) => r[\"_field\"] == \"response_time\")\n  // Group by device to isolate each host\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last reported response time. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n  // Ungroup to flatten result set\n  |> group()\n  // Rename the value column and keep only relevant fields\n  |> rename(columns: {_value: \"internet latency\"})\n  |> keep(columns: [\"${unique_identifier}\", \"internet latency\"])\n",
          "refId": "Internet response time"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "hide": false,
          "query": "// Get latest device model per device in the selected interval\nfrom(bucket: \"${bucket}\")\n  // Filter on time\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter using variable selectors (supports All and multi-select)\n  |> filter(fn: (r) => r[\"area\"] =~ /^${area:regex}$/)\n  |> filter(fn: (r) => r[\"geography\"] =~ /^${geography:regex}$/)\n  |> filter(fn: (r) => r[\"region\"] =~ /^${region:regex}$/)\n  |> filter(fn: (r) => r[\"site\"] =~ /^${site:regex}$/)\n  |> filter(fn: (r) => r[\"type\"] =~ /^${type:regex}$/)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] =~ /^${device:regex}$/)\n  |> filter(fn: (r) => r[\"product_full_name\"] =~ /^${model:regex}$/)\n  |> filter(fn: (r) => r[\"architecture\"] =~ /^${architecture:regex}$/)\n  |> filter(fn: (r) => r[\"soc\"] =~ /^${soc:regex}$/)\n  // Filter on a single meaurement to make the schema aligned\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu\")\n  // Group by device to isolate each host\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last report. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n  // Ungroup to flatten result set\n  |> group()\n  // Keep only host and device model\n  |> keep(columns: [\"${unique_identifier}\", \"product_full_name\"])\n  |> rename(columns: {\n    product_full_name: \"product full name\"\n  })",
          "refId": "Get camera model name"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "hide": false,
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"area\"] =~ /^${area:regex}$/)\n  |> filter(fn: (r) => r[\"geography\"] =~ /^${geography:regex}$/)\n  |> filter(fn: (r) => r[\"region\"] =~ /^${region:regex}$/)\n  |> filter(fn: (r) => r[\"site\"] =~ /^${site:regex}$/)\n  |> filter(fn: (r) => r[\"type\"] =~ /^${type:regex}$/)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] =~ /^${device:regex}$/)\n  |> filter(fn: (r) => r[\"product_full_name\"] =~ /^${model:regex}$/)\n  |> filter(fn: (r) => r[\"architecture\"] =~ /^${architecture:regex}$/)\n  |> filter(fn: (r) => r[\"soc\"] =~ /^${soc:regex}$/)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu\")\n  |> group(columns: [\"${unique_identifier}\"])\n  // Note that last() does not work after group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n  |> group()\n  |> keep(columns: [\"${unique_identifier}\", \"firmware_version\"])\n  |> rename(columns: {\n    firmware_version: \"firmware version\"\n  })\n",
          "refId": "A"
        }
      ],
      "title": "Last Report",
      "transformations": [
        {
          "id": "joinByField",
          "options": {
            "byField": "$unique_identifier",
            "mode": "outer"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "external ip": 3,
              "firmware version": 2,
              "${unique_identifier}": 0,
              "local ip": 4,
              "product full name": 1,
              "seen": 5
            },
            "renameByName": {
              "external ip": "External IP",
              "firmware version": "AXIS OS",
              "${unique_identifier}": "Device",
              "local ip": "Local IPs",
              "product full name": "Product Name",
              "seen": "Last Seen"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "description": "AXIS OS Changes",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "axisPlacement": "auto",
            "fillOpacity": 70,
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineWidth": 0,
            "spanNulls": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 20,
        "x": 0,
        "y": 10
      },
      "id": 18,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "mergeValues": true,
        "rowHeight": 0.9,
        "showValue": "auto",
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n\n  // Generic measurement just to access the tags. To reduce number of points,\n  // we also filter to one single core and field.\n  |> filter(fn: (r) =>\n    r[\"_measurement\"] == \"cpu\" and\n    r[\"cpu\"] == \"cpu-total\" and\n    r[\"_field\"] == \"usage_idle\" and\n\n    // Only show the ones that are reporting firmware_version\n    exists r[\"firmware_version\"] and\n\n    // Applied filters\n    (r[\"area\"] =~ /^${area:regex}$/) and\n    (r[\"geography\"] =~ /^${geography:regex}$/) and\n    (r[\"region\"] =~ /^${region:regex}$/) and\n    (r[\"site\"] =~ /^${site:regex}$/) and\n    (r[\"type\"] =~ /^${type:regex}$/) and\n    (r[\"${unique_identifier}\"] =~ /^${device:regex}$/) and\n    (r[\"product_full_name\"] =~ /^${model:regex}$/) and\n    (r[\"architecture\"] =~ /^${architecture:regex}$/) and\n    (r[\"soc\"] =~ /^${soc:regex}$/)\n  )\n\n  // Aggregate into time series windows to reduce number of returned data points\n  |> aggregateWindow(every: 1h, fn: last, createEmpty: false)\n\n  // Keep timestamp, device and firmware_version\n  |> keep(columns: [\"_time\", \"${unique_identifier}\", \"firmware_version\"])\n\n  // Rename and remap to Grafana-friendly _time, _field, _value,\n  // that gets rid of the \"firmware_version <host>\" prefix in the visualization.\n  |> map(fn: (r) => ({\n    _time: r._time,\n    _field: r[\"${unique_identifier}\"],\n    _value: r[\"firmware_version\"]\n  }))\n\n  // Group per device (now in _field)\n  |> group(columns: [\"_field\"])\n\n  // Sort by time\n  |> sort(columns: [\"_time\"])",
          "refId": "A"
        }
      ],
      "title": "AXIS OS Changes",
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "cpu"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "region 2"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "site 2"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Device"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Device detail link",
                    "url": "/d/${device_details_uid:raw}/device-details?var-bucket=${bucket}&var-device=${__value.text}"
                  }
                ]
              },
              {
                "id": "custom.width",
                "value": 192
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 20,
        "x": 0,
        "y": 19
      },
      "id": 12,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": ["sum"],
          "show": false
        },
        "frameIndex": 13,
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Trend #cpu"
          }
        ]
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket: \"${bucket}\")\n  // Selected time span\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter based on drop-downs\n  |> filter(fn: (r) => r[\"area\"] =~ /^${area:regex}$/)\n  |> filter(fn: (r) => r[\"geography\"] =~ /^${geography:regex}$/)\n  |> filter(fn: (r) => r[\"region\"] =~ /^${region:regex}$/)\n  |> filter(fn: (r) => r[\"site\"] =~ /^${site:regex}$/)\n  |> filter(fn: (r) => r[\"type\"] =~ /^${type:regex}$/)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] =~ /^${device:regex}$/)\n  |> filter(fn: (r) => r[\"product_full_name\"] =~ /^${model:regex}$/)\n  |> filter(fn: (r) => r[\"architecture\"] =~ /^${architecture:regex}$/)\n  |> filter(fn: (r) => r[\"soc\"] =~ /^${soc:regex}$/)\n  // Filter out the fields we are interested in\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu\")\n  |> filter(fn: (r) => r[\"cpu\"] == \"cpu-total\")\n  |> filter(fn: (r) => r[\"_field\"] == \"usage_idle\")\n  // One time series for each device\n  |> group(columns: [\"${unique_identifier}\"])\n  // Invert to CPU load instead of idle\n  |> map(fn: (r) => ({ r with _value: 100.0 - r._value }))\n  // Aggregate in blocks to reduce number of data points\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "refId": "cpu"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "hide": false,
          "query": "from(bucket: \"${bucket}\")\n  // Selected time span\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter based on drop-downs\n  |> filter(fn: (r) => r[\"area\"] =~ /^${area:regex}$/)\n  |> filter(fn: (r) => r[\"geography\"] =~ /^${geography:regex}$/)\n  |> filter(fn: (r) => r[\"region\"] =~ /^${region:regex}$/)\n  |> filter(fn: (r) => r[\"site\"] =~ /^${site:regex}$/)\n  |> filter(fn: (r) => r[\"type\"] =~ /^${type:regex}$/)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] =~ /^${device:regex}$/)\n  |> filter(fn: (r) => r[\"product_full_name\"] =~ /^${model:regex}$/)\n  |> filter(fn: (r) => r[\"architecture\"] =~ /^${architecture:regex}$/)\n  |> filter(fn: (r) => r[\"soc\"] =~ /^${soc:regex}$/)\n  // Filter out the fields we are interested in\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mem\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  // One time series for each device\n  |> group(columns: [\"${unique_identifier}\"])\n  // Aggregate in blocks to reduce number of data points\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "refId": "ram"
        }
      ],
      "title": "CPU and RAM trends",
      "transformations": [
        {
          "id": "timeSeriesTable",
          "options": {
            "cpu": {
              "timeField": "Time"
            },
            "ram": {
              "timeField": "Time"
            }
          }
        },
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {},
            "renameByName": {
              "Trend #cpu": "CPU Usage",
              "Trend #ram": "RAM Usage",
              "${unique_identifier}": "Device"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 28
      },
      "id": 3,
      "panels": [],
      "repeat": "device",
      "title": "${device}",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red"
              },
              {
                "color": "dark-green",
                "value": 604800
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 0,
        "y": 29
      },
      "id": 5,
      "maxDataPoints": 100,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "groupBy": [
            {
              "params": ["$__interval"],
              "type": "time"
            },
            {
              "params": ["null"],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"${bucket}\")\n  // Filter on time\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter on the right device. Since this visual will be repeated, the\n  // device variable will always contain the right value and only one,\n  // so we do not need to do regexp here..\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  // Filter on the field we want\n  |> filter(fn: (r) => r[\"_measurement\"] == \"system\")\n  |> filter(fn: (r) => r[\"_field\"] == \"uptime\")\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": ["value"],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Uptime",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "#EAB839",
                "value": 80
              },
              {
                "color": "red",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 2,
        "y": 29
      },
      "id": 1,
      "maxPerRow": 12,
      "options": {
        "displayMode": "gradient",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 300,
        "minVizHeight": 16,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["last"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {},
        "valueMode": "color"
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "hide": false,
          "query": "from(bucket: \"${bucket}\")\n  // Filter on time\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter on the right device. Since this visual will be repeated,\n  // the device variable will always contain the right value and only one,\n  // so we do not need to do regexp here..\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  // Filter on the measurement and field we want\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu\")\n  |> filter(fn: (r) => r[\"cpu\"] == \"cpu-total\")\n  |> filter(fn: (r) => r[\"_field\"] == \"usage_idle\")\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n\n  // Invert to CPU load instead of idle\n  |> map(fn: (r) => ({ r with _value: 100.0 - r._value }))",
          "refId": "A"
        }
      ],
      "title": "CPU",
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "yellow"
              },
              {
                "color": "orange",
                "value": 80
              },
              {
                "color": "red",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 4,
        "y": 29
      },
      "id": 2,
      "maxPerRow": 12,
      "options": {
        "displayMode": "gradient",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 25,
        "minVizHeight": 12,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showUnfilled": true,
        "sizing": "auto",
        "valueMode": "color"
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket: \"${bucket}\")\n  // Filter on time\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter on the right device. Since this visual will be repeated,\n  // the device variable will always contain the right value and only one,\n  // so we do not need to do regexp here..\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  // Filter on the measurement and field we want\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mem\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n",
          "refId": "A"
        }
      ],
      "title": "RAM",
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "blue"
              },
              {
                "color": "orange",
                "value": 80
              },
              {
                "color": "red",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 6,
        "y": 29
      },
      "id": 6,
      "options": {
        "displayMode": "gradient",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 25,
        "minVizHeight": 12,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {
          "titleSize": 1
        },
        "valueMode": "color"
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket: \"${bucket}\")\n  // Filter on time\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter on the right device. Since this visual will be repeated,\n  // the device variable will always contain the right value and only one,\n  // so we do not need to do regexp here..\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  // Filter on the measurement, field, and specific path we want\n  |> filter(fn: (r) => r[\"_measurement\"] == \"disk\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  |> filter(fn: (r) => r[\"path\"] == \"/usr/local\")\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n",
          "refId": "A"
        }
      ],
      "title": "Storage",
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "blue"
              },
              {
                "color": "orange",
                "value": 80
              },
              {
                "color": "red",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 8,
        "y": 29
      },
      "id": 7,
      "options": {
        "displayMode": "gradient",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 25,
        "minVizHeight": 12,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {
          "titleSize": 1
        },
        "valueMode": "color"
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket: \"${bucket}\")\n  // Filter on time\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Filter on the right device. Since this visual will be repeated,\n  // the device variable will always contain the right value and only one,\n  // so we do not need to do regexp here..\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  // Filter on the measurement, field, and specific path we want\n  |> filter(fn: (r) => r[\"_measurement\"] == \"disk\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  |> filter(fn: (r) => r[\"path\"] == \"/var/spool/storage/SD_DISK\")\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n",
          "refId": "A"
        }
      ],
      "title": "SD Card",
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "orange",
                "value": 0
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 10,
        "y": 29
      },
      "id": 22,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"processes\")\n  |> filter(fn: (r) => r[\"_field\"] == \"total\")\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)",
          "refId": "A"
        }
      ],
      "title": "Processes",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "orange",
                "value": 0
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 12,
        "y": 29
      },
      "id": 23,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"processes\")\n  |> filter(fn: (r) => r[\"_field\"] == \"total_threads\")\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)",
          "refId": "A"
        }
      ],
      "title": "Threads",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "red",
                "value": 0
              }
            ]
          },
          "unit": "Bps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 14,
        "y": 29
      },
      "id": 19,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket:  \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"net\")\n  |> filter(fn: (r) => r[\"interface\"] == \"eth0\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_recv\")\n  |> derivative(unit: 1s, nonNegative: true)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "NET-Recv",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "red",
                "value": 0
              }
            ]
          },
          "unit": "Bps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 16,
        "y": 29
      },
      "id": 20,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket:  \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"net\")\n  |> filter(fn: (r) => r[\"interface\"] == \"eth0\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bytes_sent\")\n  |> derivative(unit: 1s, nonNegative: true)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "NET-Sent",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "max": 1000,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "#EAB839",
                "value": 500
              },
              {
                "color": "red",
                "value": 800
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 18,
        "y": 29
      },
      "id": 24,
      "options": {
        "displayMode": "gradient",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 25,
        "minVizHeight": 12,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {
          "titleSize": 1
        },
        "valueMode": "color"
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"netstat\")\n  |> filter(fn: (r) => r[\"_field\"] == \"tcp_established\")\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)",
          "refId": "A"
        }
      ],
      "title": "TCP Est.",
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "#EAB839",
                "value": 10
              },
              {
                "color": "red",
                "value": 50
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 20,
        "y": 29
      },
      "id": 25,
      "options": {
        "displayMode": "gradient",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 25,
        "minVizHeight": 12,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {
          "titleSize": 1
        },
        "valueMode": "color"
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"netstat\")\n  |> filter(fn: (r) => r[\"_field\"] == \"tcp_close_wait\")\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)",
          "refId": "A"
        }
      ],
      "title": "TCP Wait",
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "max": 500,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "#EAB839",
                "value": 200
              },
              {
                "color": "red",
                "value": 400
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 22,
        "y": 29
      },
      "id": 26,
      "options": {
        "displayMode": "gradient",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 25,
        "minVizHeight": 12,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "limit": 1,
          "values": true
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {
          "titleSize": 1
        },
        "valueMode": "color"
      },
      "pluginVersion": "12.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"${unique_identifier}\"] == \"${device}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"netstat\")\n  |> filter(fn: (r) => r[\"_field\"] == \"udp_socket\")\n  // Group by device to merge multiple tagsets\n  |> group(columns: [\"${unique_identifier}\"])\n  // Get the last sample. Note that last() does not work after\n  // group, so we use sort+limit instead.\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 1)",
          "refId": "A"
        }
      ],
      "title": "UDP Est.",
      "type": "bargauge"
    }
  ],
  "preload": false,
  "refresh": "15m",
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": [
      {
        "allowCustomValue": true,
        "current": {
          "text": "InfluxDB",
          "value": "InfluxDB"
        },
        "description": "",
        "hide": 2,
        "label": "Data Source",
        "name": "datasource",
        "options": [],
        "query": "influxdb",
        "refresh": 1,
        "regex": "",
        "type": "datasource"
      },
      {
        "current": {
          "text": "cameras",
          "value": "cameras"
        },
        "description": "Case insensitive prefix for filtering buckets",
        "hide": 2,
        "name": "bucket_prefix",
        "query": "cameras",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "import \"strings\"\n\nbuckets()\n|> filter(fn: (r) => strings.hasPrefix(v: strings.toLower(v: r.name), prefix: \"${bucket_prefix}\"))\n|> sort(columns: [\"name\"])",
        "hide": 0,
        "label": "Source Bucket",
        "name": "bucket",
        "options": [],
        "query": {
          "query": "import \"strings\"\n\nbuckets()\n|> filter(fn: (r) => strings.hasPrefix(v: strings.toLower(v: r.name), prefix: \"${bucket_prefix}\"))\n|> sort(columns: [\"name\"])"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "allValue": ".*",
        "allowCustomValue": false,
        "current": {
          "text": "All",
          "value": "$__all"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"${unique_identifier}\", start: 1970-01-01T00:00:00Z)",
        "description": "All devices that are known in the schema",
        "includeAll": true,
        "label": "Device",
        "multi": true,
        "name": "device",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"${unique_identifier}\", start: 1970-01-01T00:00:00Z)"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "allValue": ".*",
        "allowCustomValue": false,
        "current": {
          "text": "All",
          "value": "$__all"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"area\", start: 1970-01-01T00:00:00Z)",
        "description": "top-most level (e.g., Europe)",
        "includeAll": true,
        "label": "Area",
        "multi": true,
        "name": "area",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"area\", start: 1970-01-01T00:00:00Z)"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "allValue": ".*",
        "allowCustomValue": false,
        "current": {
          "text": "All",
          "value": "$__all"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"geography\", start: 1970-01-01T00:00:00Z)",
        "description": "sub division of Area (e.g., Sweden)",
        "includeAll": true,
        "label": "Geography",
        "multi": true,
        "name": "geography",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"geography\", start: 1970-01-01T00:00:00Z)"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "allValue": ".*",
        "allowCustomValue": false,
        "current": {
          "text": "All",
          "value": "$__all"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"region\", start: 1970-01-01T00:00:00Z)",
        "description": "Subdivision of Geography (e.g., Stockholm)",
        "includeAll": true,
        "label": "Region",
        "multi": true,
        "name": "region",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"region\", start: 1970-01-01T00:00:00Z)"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "allValue": ".*",
        "allowCustomValue": false,
        "current": {
          "text": "All",
          "value": "$__all"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"site\", start: 1970-01-01T00:00:00Z)",
        "description": "bottom-most level (e.g., Friends Arena)",
        "includeAll": true,
        "label": "Site",
        "multi": true,
        "name": "site",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"site\", start: 1970-01-01T00:00:00Z)"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "allValue": ".*",
        "allowCustomValue": false,
        "current": {
          "text": ["All"],
          "value": ["$__all"]
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"type\", start: 1970-01-01T00:00:00Z)",
        "includeAll": true,
        "label": "Type",
        "multi": true,
        "name": "type",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"type\", start: 1970-01-01T00:00:00Z)"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "host",
          "value": "host"
        },
        "description": "The name of the field for the unique identifier like the serial number",
        "hide": 2,
        "name": "unique_identifier",
        "query": "host",
        "skipUrlSync": true,
        "type": "constant"
      },
      {
        "allValue": ".*",
        "allowCustomValue": false,
        "current": {
          "text": "All",
          "value": "$__all"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"product_full_name\", start: 1970-01-01T00:00:00Z)",
        "description": "Model of the camera",
        "includeAll": true,
        "label": "Model Name",
        "multi": true,
        "name": "model",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"product_full_name\", start: 1970-01-01T00:00:00Z)"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "bekds38txl1j4c",
          "value": "bekds38txl1j4c"
        },
        "description": "UID of the device details dashboard",
        "hide": 2,
        "name": "device_details_uid",
        "query": "bekds38txl1j4c",
        "skipUrlSync": true,
        "type": "constant"
      },
      {
        "current": {
          "selected": true,
          "text": ["All"],
          "value": ["$__all"]
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"architecture\", start: 1970-01-01T00:00:00Z)",
        "hide": 0,
        "includeAll": true,
        "label": "Architecture",
        "multi": true,
        "name": "architecture",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"architecture\", start: 1970-01-01T00:00:00Z)"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": true,
          "text": ["All"],
          "value": ["$__all"]
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"soc\", start: 1970-01-01T00:00:00Z)",
        "hide": 0,
        "includeAll": true,
        "label": "System on Chip",
        "multi": true,
        "name": "soc",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"soc\", start: 1970-01-01T00:00:00Z)"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Overview of Devices",
  "uid": "ceh7yyrnarj7kd",
  "version": 34
}
