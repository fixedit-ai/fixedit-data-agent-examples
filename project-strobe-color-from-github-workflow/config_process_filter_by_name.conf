# Workflow Name Filter Processor Configuration
#
# This configuration uses Telegraf's Starlark processor to filter GitHub
# workflow runs by name, keeping only the workflows that match the target
# workflow specified in the GITHUB_WORKFLOW environment variable.
#
# Required Environment Variables:
# - GITHUB_WORKFLOW: Workflow name to filter by (display name from GitHub Actions)
#
# Key Features:
# - Processes only github_workflow metrics from the input stage
# - Filters by workflow name using GITHUB_WORKFLOW environment variable
# - Single responsibility: workflow name filtering only
# - Early stage filtering reduces processing load on downstream processors
# - Uses Starlark instead of processors.filter because processors.filter doesn't support environment variable substitution (${GITHUB_WORKFLOW})
#
# Example:
#
# Input (multiple workflows):
# {"fields":{"name":"Deploy Check","conclusion":"success","run_number":1},"name":"github_workflow","tags":{},"timestamp":1754667012}
# {"fields":{"name":"Validate JSON","conclusion":"failure","run_number":20},"name":"github_workflow","tags":{},"timestamp":1754667012}
# {"fields":{"name":"Security Check","conclusion":"success","run_number":5},"name":"github_workflow","tags":{},"timestamp":1754667012}
#
# With GITHUB_WORKFLOW="Validate JSON":
# Result: Only the "Validate JSON" workflow is passed through to the next processor

[[processors.starlark]]
  # Filter to process only GitHub workflow metrics from input
  namepass = ["github_workflow"]

  # Starlark script for workflow name filtering
  source = '''
# Helper function to copy a metric with a new name
def copy_to_new_name(original_metric, new_name):
    """Create a new metric with the same data but different name"""
    new = Metric(new_name)
    # Copy fields one by one (deepcopy doesn't work on Fields objects)
    for field_name, field_value in original_metric.fields.items():
        new.fields[field_name] = field_value
    # Copy tags one by one (deepcopy doesn't work on Tags objects)
    for tag_name, tag_value in original_metric.tags.items():
        new.tags[tag_name] = tag_value
    new.time = original_metric.time
    return new

def apply(metric):
    # Get the workflow name from the metric tags (name field is now available as a tag)
    workflow_name = metric.tags.get("name", "")

    # Get the target workflow from environment variable
    target_workflow = "${GITHUB_WORKFLOW}"

    # Only pass through workflows that match the target
    if workflow_name == target_workflow:
        return copy_to_new_name(metric, "github_workflow_filtered")

    # Drop non-matching workflows
    return None  # Drop the metric (don't pass it to the next stage)
'''