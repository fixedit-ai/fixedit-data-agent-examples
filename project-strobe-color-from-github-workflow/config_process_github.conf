# GitHub Workflow Status to Strobe Color Processor Configuration
#
# This configuration uses Telegraf's Starlark processor to transform GitHub
# workflow status data into simple profile names for the Axis strobe light.
#
# Key Features:
# - Converts GitHub workflow conclusions to strobe-compatible profile names
# - Creates simplified metrics containing only profile name information
# - Uses Starlark scripting language for flexible data transformation
#
# Color Mapping Logic:
# - success → green (workflow passed successfully)
# - failure → red (workflow failed with errors)
# - null/undefined → yellow (workflow is still running or queued)

[[processors.starlark]]
  # Filter to process only GitHub workflow metrics
  # This ensures the processor only runs on relevant data
  # and ignores other metrics that might be in the pipeline
  namepass = ["github_workflow"]

  # Starlark script for data transformation
  # Starlark is a Python-like language optimized for configuration
  # The apply() function is called for each matching metric
  source = '''
def apply(metric):
    # Extract the workflow conclusion from metric tags
    # The conclusion field indicates the final workflow result
    # It will be null/undefined for workflows that are still running
    conclusion = metric.tags.get("conclusion")

    # Map GitHub workflow conclusions to strobe light colors
    # Default to yellow for running/unknown states (safe fallback)
    color = "yellow"  # Default: workflow is running, queued, or unknown state

    # Green: workflow completed successfully
    # This indicates all tests passed, build succeeded, deployment worked
    if conclusion == "success":
        color = "green"

    # Red: workflow failed with errors
    # This indicates test failures, build errors, or deployment issues
    elif conclusion == "failure":
        color = "red"

    # Note: Other conclusion values (neutral, cancelled, skipped, timed_out,
    # action_required) default to yellow for visual indication

    # Create a new simplified metric containing only the color
    # This reduces data size and focuses on actionable information
    # The output metric name 'workflow_color' is used by the strobe controller
    new = Metric("workflow_color")
    new.fields["color"] = color

    # Return the new metric to pass to the next stage in the pipeline
    return new
'''