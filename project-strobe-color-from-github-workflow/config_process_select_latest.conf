# Latest Workflow Selector Processor Configuration
#
# This configuration uses Telegraf's Starlark processor to select only the
# most recent workflow run from multiple github_workflow metrics, ensuring
# the strobe reflects the current workflow status.
#
# Key Features:
# - Processes only github_workflow metrics from the previous processor
# - Uses run_number to identify the most recent workflow run
# - Maintains state to track the highest run_number seen
# - Allows repeated metrics (strobe updates on each sync even if no new runs)
# - Assumes all metrics are for the same workflow (filtering by workflow name
#   is handled by config_process_filter_by_name.conf upstream in the pipeline)
#
# Usage:
# This processor should be placed AFTER config_process_filter_by_name.conf
# in the processing pipeline to select the latest github_workflow metric
# from the multiple metrics that the filter processor passes through.
#
# Example processing sequence:
#
# Input 1: {"fields":{"run_number":16},"name":"github_workflow_filtered","tags":{"conclusion":"failure"}}
# Effect: Let through (first metric, state updated to run_number=16)
#
# Input 2: {"fields":{"run_number":20},"name":"github_workflow_filtered","tags":{"conclusion":"success"}}
# Effect: Let through (higher run_number, state updated to run_number=20)
#
# Input 3: {"fields":{"run_number":20},"name":"github_workflow_filtered","tags":{"conclusion":"success"}}
# Effect: Let through (same run_number, i.e. most up-to-date)
#
# Input 4: {"fields":{"run_number":19},"name":"github_workflow_filtered","tags":{"conclusion":"success"}}
# Effect: Drop (lower run_number than current state of 20)
#
# Result: Metrics with run_number=16, 20, and 20 are passed through; run_number=19 is dropped

[[processors.starlark]]
  # Filter to process only github_workflow_filtered metrics
  # This ensures we only process the metrics from the filter processor
  namepass = ["github_workflow_filtered"]

  # Starlark script for latest workflow selection
  # Uses state variable to track the highest run_number seen
  source = '''
# Helper function to copy a metric with a new name
def copy_to_new_name(original_metric, new_name):
    """Create a new metric with the same data but different name"""
    new = Metric(new_name)
    # Copy fields one by one (deepcopy doesn't work on Fields objects)
    for field_name, field_value in original_metric.fields.items():
        new.fields[field_name] = field_value
    # Copy tags one by one (deepcopy doesn't work on Tags objects)
    for tag_name, tag_value in original_metric.tags.items():
        new.tags[tag_name] = tag_value
    new.time = original_metric.time
    return new

# State to track the latest run_number we've seen
state = {
  "latest_run_number": 0
}

def apply(metric):
    # Get the run_number from the metric fields
    # This comes from the original GitHub API data filtered by the name filter processor
    run_number = metric.fields.get("run_number", 0)
    
    # Drop older workflow runs
    if run_number < state["latest_run_number"]:
        return None  # Drop the metric (don't pass it to the next stage)
    
    # This is the newest run we've seen - update state and let it through
    state["latest_run_number"] = run_number
    
    return copy_to_new_name(metric, "github_workflow_latest")
'''