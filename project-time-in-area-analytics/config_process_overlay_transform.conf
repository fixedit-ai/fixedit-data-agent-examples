# Overlay Data Transformation Processor
#
# This processor transforms analytics detection data into the format expected
# by the overlay_manager.sh script, including coordinate transformation and
# field formatting.

[[processors.starlark]]
  # Source code for the transformation logic
  source = '''
def apply(metric):
    # Only process detection frames
    if metric.name != "detection_frame":
        return metric
    
    # Extract bounding box coordinates (flat format from device)
    if ("bounding_box_left" in metric.fields and 
        "bounding_box_right" in metric.fields and 
        "bounding_box_top" in metric.fields and 
        "bounding_box_bottom" in metric.fields):
        
        left = metric.fields["bounding_box_left"]
        right = metric.fields["bounding_box_right"]
        top = metric.fields["bounding_box_top"]
        bottom = metric.fields["bounding_box_bottom"]
        
        # Calculate center coordinates in analytics system (0.0 to 1.0)
        center_x = (left + right) / 2.0
        center_y = (top + bottom) / 2.0
        
        # Transform to VAPIX API coordinate system (-1.0 to 1.0)
        # Formula: vapix_coord = (analytics_coord - 0.5) * 2
        vapix_x = (center_x - 0.5) * 2.0
        vapix_y = (center_y - 0.5) * 2.0
        
        # Calculate object size (width * height)
        width = right - left
        height = bottom - top
        size = width * height
        
        # Create new overlay metric with transformed data
        overlay_metric = Metric("overlay_metric")
        
        # Set transformed coordinates and size
        overlay_metric.fields["center_x"] = vapix_x
        overlay_metric.fields["center_y"] = vapix_y
        overlay_metric.fields["size"] = size
        
        # Ensure required fields exist with proper names
        if "object_type" in metric.fields:
            overlay_metric.fields["object_type"] = metric.fields["object_type"]
        
        if "track_id" in metric.fields:
            overlay_metric.fields["track_id"] = metric.fields["track_id"]
        
        if "time_in_area_seconds" in metric.fields:
            overlay_metric.fields["time_in_area_seconds"] = metric.fields["time_in_area_seconds"]
        
        # Add timestamp for overlay positioning
        if "timestamp" in metric.fields:
            overlay_metric.fields["timestamp"] = metric.fields["timestamp"]
        
        # Return both original and new overlay metric
        return [metric, overlay_metric]
    
    # If no bounding box, drop the metric (can't create overlay without position)
    return []
'''
